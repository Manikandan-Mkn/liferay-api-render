/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.student.headless.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.student.headless.model.employee;
import com.student.headless.model.employeeModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the employee service. Represents a row in the &quot;FOO_employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>employeeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link employeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see employeeImpl
 * @generated
 */
public class employeeModelImpl
	extends BaseModelImpl<employee> implements employeeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee model instance should use the <code>employee</code> interface instead.
	 */
	public static final String TABLE_NAME = "FOO_employee";

	public static final Object[][] TABLE_COLUMNS = {
		{"employeeId", Types.BIGINT}, {"employeeName", Types.VARCHAR},
		{"department", Types.VARCHAR}, {"age", Types.VARCHAR},
		{"mobileNumber", Types.BIGINT}, {"salary", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("department", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("age", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("salary", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FOO_employee (employeeId LONG not null primary key,employeeName VARCHAR(75) null,department VARCHAR(75) null,age VARCHAR(75) null,mobileNumber LONG,salary LONG)";

	public static final String TABLE_SQL_DROP = "drop table FOO_employee";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employee.employeeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FOO_employee.employeeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public employeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _employeeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return employee.class;
	}

	@Override
	public String getModelClassName() {
		return employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<employee, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((employee)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<employee, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<employee, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(employee)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<employee, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<employee, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<employee, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<employee, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<employee, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<employee, Object>>();
		Map<String, BiConsumer<employee, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<employee, ?>>();

		attributeGetterFunctions.put("employeeId", employee::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId", (BiConsumer<employee, Long>)employee::setEmployeeId);
		attributeGetterFunctions.put("employeeName", employee::getEmployeeName);
		attributeSetterBiConsumers.put(
			"employeeName",
			(BiConsumer<employee, String>)employee::setEmployeeName);
		attributeGetterFunctions.put("department", employee::getDepartment);
		attributeSetterBiConsumers.put(
			"department",
			(BiConsumer<employee, String>)employee::setDepartment);
		attributeGetterFunctions.put("age", employee::getAge);
		attributeSetterBiConsumers.put(
			"age", (BiConsumer<employee, String>)employee::setAge);
		attributeGetterFunctions.put("mobileNumber", employee::getMobileNumber);
		attributeSetterBiConsumers.put(
			"mobileNumber",
			(BiConsumer<employee, Long>)employee::setMobileNumber);
		attributeGetterFunctions.put("salary", employee::getSalary);
		attributeSetterBiConsumers.put(
			"salary", (BiConsumer<employee, Long>)employee::setSalary);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	@Override
	public String getEmployeeName() {
		if (_employeeName == null) {
			return "";
		}
		else {
			return _employeeName;
		}
	}

	@Override
	public void setEmployeeName(String employeeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeName = employeeName;
	}

	@Override
	public String getDepartment() {
		if (_department == null) {
			return "";
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_department = department;
	}

	@Override
	public String getAge() {
		if (_age == null) {
			return "";
		}
		else {
			return _age;
		}
	}

	@Override
	public void setAge(String age) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_age = age;
	}

	@Override
	public long getMobileNumber() {
		return _mobileNumber;
	}

	@Override
	public void setMobileNumber(long mobileNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNumber = mobileNumber;
	}

	@Override
	public long getSalary() {
		return _salary;
	}

	@Override
	public void setSalary(long salary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salary = salary;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, employee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public employee toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, employee>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		employeeImpl employeeImpl = new employeeImpl();

		employeeImpl.setEmployeeId(getEmployeeId());
		employeeImpl.setEmployeeName(getEmployeeName());
		employeeImpl.setDepartment(getDepartment());
		employeeImpl.setAge(getAge());
		employeeImpl.setMobileNumber(getMobileNumber());
		employeeImpl.setSalary(getSalary());

		employeeImpl.resetOriginalValues();

		return employeeImpl;
	}

	@Override
	public employee cloneWithOriginalValues() {
		employeeImpl employeeImpl = new employeeImpl();

		employeeImpl.setEmployeeId(
			this.<Long>getColumnOriginalValue("employeeId"));
		employeeImpl.setEmployeeName(
			this.<String>getColumnOriginalValue("employeeName"));
		employeeImpl.setDepartment(
			this.<String>getColumnOriginalValue("department"));
		employeeImpl.setAge(this.<String>getColumnOriginalValue("age"));
		employeeImpl.setMobileNumber(
			this.<Long>getColumnOriginalValue("mobileNumber"));
		employeeImpl.setSalary(this.<Long>getColumnOriginalValue("salary"));

		return employeeImpl;
	}

	@Override
	public int compareTo(employee employee) {
		long primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof employee)) {
			return false;
		}

		employee employee = (employee)object;

		long primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<employee> toCacheModel() {
		employeeCacheModel employeeCacheModel = new employeeCacheModel();

		employeeCacheModel.employeeId = getEmployeeId();

		employeeCacheModel.employeeName = getEmployeeName();

		String employeeName = employeeCacheModel.employeeName;

		if ((employeeName != null) && (employeeName.length() == 0)) {
			employeeCacheModel.employeeName = null;
		}

		employeeCacheModel.department = getDepartment();

		String department = employeeCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			employeeCacheModel.department = null;
		}

		employeeCacheModel.age = getAge();

		String age = employeeCacheModel.age;

		if ((age != null) && (age.length() == 0)) {
			employeeCacheModel.age = null;
		}

		employeeCacheModel.mobileNumber = getMobileNumber();

		employeeCacheModel.salary = getSalary();

		return employeeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<employee, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<employee, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<employee, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((employee)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, employee>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					employee.class, ModelWrapper.class);

	}

	private long _employeeId;
	private String _employeeName;
	private String _department;
	private String _age;
	private long _mobileNumber;
	private long _salary;

	public <T> T getColumnValue(String columnName) {
		Function<employee, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((employee)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("employeeName", _employeeName);
		_columnOriginalValues.put("department", _department);
		_columnOriginalValues.put("age", _age);
		_columnOriginalValues.put("mobileNumber", _mobileNumber);
		_columnOriginalValues.put("salary", _salary);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("employeeId", 1L);

		columnBitmasks.put("employeeName", 2L);

		columnBitmasks.put("department", 4L);

		columnBitmasks.put("age", 8L);

		columnBitmasks.put("mobileNumber", 16L);

		columnBitmasks.put("salary", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private employee _escapedModel;

}